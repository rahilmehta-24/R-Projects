merged_data <- merge(df1, df2, by = "ID")
library(dplyr)
rm(list = ls())
library(dplyr)
options(scipen = 99999)
## Reading the claim file - till 2022 sep end
df1_1 = read.csv("C:/Users/99015751/Desktop/Projects/CAN_Prediction/Dec22/claims_data.csv")
rm(list = ls())
library(dplyr)
library(dplyr)
options(scipen = 99999)
## Reading the claim file - till 2022 sep end
df1_1 = read.csv("C:/Users/99015751/Desktop/Projects/CAN_Prediction/Dec22/claims_data.csv")
library(dplyr)
dates <- as.Date(c("2020-01-01", "2020-01-02", "2020-01-03", "2020-01-04", "2020-01-05"), format = "%Y-%m-%d")
dates_encoded <- factorize(dates)
x <- c("male", "female", "others", "male", "female", "others")
x_encoded <- as.factor(x)
x_encoded <- as.factor(x, levels = c("male", "female", "others"))
levels(x_encoded)
factor(x_encoded)
V = c("North", "South", "East", "East")
drn <- factor(V)
drn
as.numeric(drn)
levels_order <- c("male", "female", "others")
gender_encoded <- as.factor(gender, levels = levels_order)
x <- c("male", "female", "others", "male", "female", "others")
levels_order <- c("male", "female", "others")
gender_encoded <- as.factor(gender, levels = levels_order)
x <- c("male", "female", "others", "male", "female", "others")
levels_order <- c("male", "female", "others")
x_encoded <- as.factor(x, levels = levels_order)
factor(x)
x_encoded <- as.factor(x)
factor(x)
y <- factor(x)
y
as.numeric(y)
x <- c("male", "female", "others", "male", "female", "others")
levels_order <- c("male", "female", "others")
x_encoded <- as.factor(x, levels = levels_order)
x_encoded <- as.factor(x, labels = levels_order, ordered = is.ordered(x))
x_encoded <- as.factor(x, labels = levels_order)
V = c("North", "South", "East", "East")
levels_order <- c("North", "South", "East", "East")
# Convert vector 'V' into a factor
drn <- factor(V, labels = levels_order)
V = c("North", "South", "East", "East")
levels_order <- c("North", "South", "East")
# Convert vector 'V' into a factor
drn <- factor(V, labels = levels_order)
drn
as.numeric(drn)
as.character(drn)
gc()
year <- "0020"
new_year <- paste(substring(year, 3), substring(year, 1, 2), sep="")
new_year
year <- "0020"
new_year <- paste(substring(year, 3, 4), substring(year, 1, 2), sep="")
new_year
year <- "0020"
new_year <- paste(substring(year, 3, 4), substring(year, 1, 2), sep="")
new_year
year <- "0020"
new_year <- paste(substring(year, 3, 3), substring(year, 1, 2), sep="")
new_year
library(rvest)
install.packages("rvest")
library(rvest)
library(randomForest)
# Function to scrape movie data from IMDb
get_movie_data <- function(url) {
html_page <- read_html(url)
# Extract the movie title
title <- html_page %>%
html_node("h1") %>%
html_text()
# Extract the movie budget
budget_string <- html_page %>%
html_nodes(".txt-block") %>%
html_text() %>%
grep("Budget", ., value = TRUE)
budget <- as.numeric(gsub("[^[:digit:]]", "", budget_string))
data.frame(title = title, budget = budget)
}
# Scrape movie data from IMDb
movie_urls <- c("https://www.imdb.com/title/tt0111161/",
"https://www.imdb.com/title/tt0068646/",
"https://www.imdb.com/title/tt0071562/")
movie_dfs <- lapply(movie_urls, get_movie_data)
# Function to scrape movie data from IMDb
get_movie_data <- function(url) {
html_page <- read_html(url)
# Extract the movie title
title <- html_page %>%
html_node("h1") %>%
html_text()
# Extract the movie budget
budget_string <- html_page %>%
html_nodes(".txt-block") %>%
html_text() %>%
grep("Budget", ., value = TRUE)
budget <- as.numeric(gsub("[^[:digit:]]", "", budget_string))
data.frame(title = title, budget = budget)
}
# Scrape movie data from IMDb
movie_urls <- c("https://www.imdb.com/title/tt0111161/",
"https://www.imdb.com/title/tt0068646/",
"https://www.imdb.com/title/tt0071562/")
movie_dfs <- lapply(movie_urls, get_movie_data)
test_df <- movies_df[-train_index, ]
plumber::plumb(file='D:/Projects/R/Plumber/add/rscript.R')$run()
reticulate::repl_python()
import requests
resp = requests.get("http://localhost:7000/plot")
quit
plumb(file='D:/Projects/R/Plumber/add/rscript.R')$run()
plumb(file='D:/Projects/R/Plumber/add/rscript.R')$run()
library(reticulate)
library(plumber)
r <- plumb("test1.py")
library(reticulate)
library(plumber)
setwd("D:/Projects/R/py_r_integration")
r <- plumb("test1.py")
from flask import Flask, render_template, url_for, request, redirect
reticulate::repl_python()
from flask import Flask, render_template, url_for, request, redirect
import subprocess
app = Flask(__name__)
@app.route('/api', methods = ['POST'])
def api():
data = "Hello"
response = 'Recieved POST requestwith data: {}'.format(data)
return response
if __name__ == '__main__':
subprocess.Popen(['Rscript', 'api_test.R'])
app.run(port=6000, debug=TRUE)
from flask import Flask, request
import subprocess
app = Flask(__name__)
@app.route('/api', methods=['POST'])
def api():
data = request.data.decode('utf-8')
# Here you can process the incoming data if needed
response = 'Received POST request with data: {}'.format(data)
return response
if __name__ == '__main__':
# Start the Plumber API as a subprocess
subprocess.Popen(['Rscript', 'plumber.R'])
# Run the Flask app using the development server on port 6000
app.run(port=6000, debug=True)
pip install flask
pip install Flask
quit
# Load the required libraries
library(plumber)
library(httr)
setwd("D:/Projects/R/py_r_integration")
# Define the Plumber router
r <- plumb("api_test.R")
plumb(file='api_test.R')$run()
plumb(file='api_test.R')$run()
plumb(file='api_test.R')$run()
install.packages("reticulate")
library(plumber)
library(reticulate)
# Start Flask app in a separate Python process
use_python("app.py", required = TRUE, port = 7000)
# Start Flask app in a separate Python process
use_python("app.py", required = TRUE)
# Start Flask app in a separate Python process
use_python("test1.py", required = TRUE)
# Start Flask app in a separate Python process
use_python("D:\Projects\R\py_r_integration\test1.py", required = TRUE)
# Start Flask app in a separate Python process
use_python("D:/Projects/R/py_r_integration/test1.py", required = TRUE)
plumb(file='api_test.R')$run()
library(plumber)
library(reticulate)
py_file <- "D:/Projects/R/py_r_integration/test1.py"
api <- plumber$new()
api <- Plumber$new()
api$registerHooks(list(use_python()))
library(plumber)
library(reticulate)
py_file <- "D:/Projects/R/py_r_integration/test1.py"
api <- Plumber$new()
api$registerHooks(list(use_python()))
api$registerHooks(list(use_python("D:/Projects/R/py_r_integration/test1.py")))
python_path <- Sys.which("python")
print(python_path)
library(plumber)
library(reticulate)
py_file <- "D:/Projects/R/py_r_integration/test1.py"
api <- Plumber$new()
api$registerHooks(list(use_python("D:/python39/Scripts/clear_comtypes_cache.py")))
